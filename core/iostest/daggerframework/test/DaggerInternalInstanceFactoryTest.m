//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComGoogleCommonTruthSubject.h"
#include "ComGoogleCommonTruthTestVerb.h"
#include "ComGoogleCommonTruthTruth.h"
#include "DaggerInternalFactory.h"
#include "DaggerInternalInstanceFactory.h"
#include "DaggerInternalInstanceFactoryTest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Rule.h"
#include "org/junit/Test.h"
#include "org/junit/rules/ExpectedException.h"
#include "org/junit/runner/RunWith.h"
#include "org/junit/runners/JUnit4.h"

__attribute__((unused)) static IOSObjectArray *DaggerInternalInstanceFactoryTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DaggerInternalInstanceFactoryTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *DaggerInternalInstanceFactoryTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *DaggerInternalInstanceFactoryTest__Annotations$3();

@implementation DaggerInternalInstanceFactoryTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DaggerInternalInstanceFactoryTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)instanceFactory {
  id instance = create_NSObject_init();
  id<DaggerInternalFactory> factory = DaggerInternalInstanceFactory_createWithId_(instance);
  [((ComGoogleCommonTruthSubject *) nil_chk([((ComGoogleCommonTruthTestVerb *) nil_chk(ComGoogleCommonTruthTruth_assert_())) thatWithId:[((id<DaggerInternalFactory>) nil_chk(factory)) get]])) isEqualToWithId:instance];
  [((ComGoogleCommonTruthSubject *) nil_chk([((ComGoogleCommonTruthTestVerb *) nil_chk(ComGoogleCommonTruthTruth_assert_())) thatWithId:[factory get]])) isEqualToWithId:instance];
  [((ComGoogleCommonTruthSubject *) nil_chk([((ComGoogleCommonTruthTestVerb *) nil_chk(ComGoogleCommonTruthTruth_assert_())) thatWithId:[factory get]])) isEqualToWithId:instance];
}

- (void)create_throwsNullPointerException {
  [((OrgJunitRulesExpectedException *) nil_chk(thrown_)) expectWithIOSClass:JavaLangNullPointerException_class_()];
  DaggerInternalInstanceFactory_createWithId_(nil);
}

- (void)dealloc {
  RELEASE_(thrown_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(instanceFactory);
  methods[2].selector = @selector(create_throwsNullPointerException);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "thrown_", "LOrgJunitRulesExpectedException;", .constantValue.asLong = 0, 0x11, -1, -1, -1, 2 },
  };
  static const void *ptrTable[] = { (void *)&DaggerInternalInstanceFactoryTest__Annotations$0, (void *)&DaggerInternalInstanceFactoryTest__Annotations$1, (void *)&DaggerInternalInstanceFactoryTest__Annotations$2, (void *)&DaggerInternalInstanceFactoryTest__Annotations$3 };
  static const J2ObjcClassInfo _DaggerInternalInstanceFactoryTest = { "InstanceFactoryTest", "dagger.internal", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, -1, 3 };
  return &_DaggerInternalInstanceFactoryTest;
}

@end

void DaggerInternalInstanceFactoryTest_init(DaggerInternalInstanceFactoryTest *self) {
  NSObject_init(self);
  JreStrongAssign(&self->thrown_, OrgJunitRulesExpectedException_none());
}

DaggerInternalInstanceFactoryTest *new_DaggerInternalInstanceFactoryTest_init() {
  J2OBJC_NEW_IMPL(DaggerInternalInstanceFactoryTest, init)
}

DaggerInternalInstanceFactoryTest *create_DaggerInternalInstanceFactoryTest_init() {
  J2OBJC_CREATE_IMPL(DaggerInternalInstanceFactoryTest, init)
}

IOSObjectArray *DaggerInternalInstanceFactoryTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalInstanceFactoryTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalInstanceFactoryTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRule() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalInstanceFactoryTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(OrgJunitRunnersJUnit4_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalInstanceFactoryTest)
