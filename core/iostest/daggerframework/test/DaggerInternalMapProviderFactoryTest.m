//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComGoogleCommonTruthIterableSubject.h"
#include "ComGoogleCommonTruthOrdered.h"
#include "ComGoogleCommonTruthTestVerb.h"
#include "ComGoogleCommonTruthTruth.h"
#include "DaggerInternalFactory.h"
#include "DaggerInternalMapProviderFactory.h"
#include "DaggerInternalMapProviderFactoryTest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "javax/inject/Provider.h"
#include "org/junit/Rule.h"
#include "org/junit/Test.h"
#include "org/junit/rules/ExpectedException.h"
#include "org/junit/runner/RunWith.h"
#include "org/junit/runners/JUnit4.h"

@interface DaggerInternalMapProviderFactoryTest ()

+ (id<JavaxInjectProvider>)incrementingIntegerProviderWithInt:(jint)seed;

@end

__attribute__((unused)) static id<JavaxInjectProvider> DaggerInternalMapProviderFactoryTest_incrementingIntegerProviderWithInt_(jint seed);

__attribute__((unused)) static IOSObjectArray *DaggerInternalMapProviderFactoryTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DaggerInternalMapProviderFactoryTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *DaggerInternalMapProviderFactoryTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *DaggerInternalMapProviderFactoryTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *DaggerInternalMapProviderFactoryTest__Annotations$4();

@interface DaggerInternalMapProviderFactoryTest_1 : NSObject < JavaxInjectProvider > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

- (JavaLangInteger *)get;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalMapProviderFactoryTest_1)

__attribute__((unused)) static void DaggerInternalMapProviderFactoryTest_1_initWithJavaUtilConcurrentAtomicAtomicInteger_(DaggerInternalMapProviderFactoryTest_1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static DaggerInternalMapProviderFactoryTest_1 *new_DaggerInternalMapProviderFactoryTest_1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalMapProviderFactoryTest_1 *create_DaggerInternalMapProviderFactoryTest_1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@implementation DaggerInternalMapProviderFactoryTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DaggerInternalMapProviderFactoryTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)nullKey {
  [((OrgJunitRulesExpectedException *) nil_chk(thrown_)) expectWithIOSClass:JavaLangNullPointerException_class_()];
  [((DaggerInternalMapProviderFactory_Builder *) nil_chk(DaggerInternalMapProviderFactory_builderWithInt_(1))) putWithId:nil withJavaxInjectProvider:DaggerInternalMapProviderFactoryTest_incrementingIntegerProviderWithInt_(1)];
}

- (void)nullValue {
  [((OrgJunitRulesExpectedException *) nil_chk(thrown_)) expectWithIOSClass:JavaLangNullPointerException_class_()];
  [((DaggerInternalMapProviderFactory_Builder *) nil_chk(DaggerInternalMapProviderFactory_builderWithInt_(1))) putWithId:@"Hello" withJavaxInjectProvider:nil];
}

- (void)iterationOrder {
  id<JavaxInjectProvider> p1 = DaggerInternalMapProviderFactoryTest_incrementingIntegerProviderWithInt_(10);
  id<JavaxInjectProvider> p2 = DaggerInternalMapProviderFactoryTest_incrementingIntegerProviderWithInt_(20);
  id<JavaxInjectProvider> p3 = DaggerInternalMapProviderFactoryTest_incrementingIntegerProviderWithInt_(30);
  id<JavaxInjectProvider> p4 = DaggerInternalMapProviderFactoryTest_incrementingIntegerProviderWithInt_(40);
  id<JavaxInjectProvider> p5 = DaggerInternalMapProviderFactoryTest_incrementingIntegerProviderWithInt_(50);
  id<DaggerInternalFactory> factory = [((DaggerInternalMapProviderFactory_Builder *) nil_chk([((DaggerInternalMapProviderFactory_Builder *) nil_chk([((DaggerInternalMapProviderFactory_Builder *) nil_chk([((DaggerInternalMapProviderFactory_Builder *) nil_chk([((DaggerInternalMapProviderFactory_Builder *) nil_chk([((DaggerInternalMapProviderFactory_Builder *) nil_chk(DaggerInternalMapProviderFactory_builderWithInt_(4))) putWithId:@"two" withJavaxInjectProvider:p2])) putWithId:@"one" withJavaxInjectProvider:p1])) putWithId:@"three" withJavaxInjectProvider:p3])) putWithId:@"one" withJavaxInjectProvider:p5])) putWithId:@"four" withJavaxInjectProvider:p4])) build];
  id<JavaUtilMap> expectedMap = create_JavaUtilLinkedHashMap_init();
  [expectedMap putWithId:@"two" withId:p2];
  [expectedMap putWithId:@"one" withId:p1];
  [expectedMap putWithId:@"three" withId:p3];
  [expectedMap putWithId:@"one" withId:p5];
  [expectedMap putWithId:@"four" withId:p4];
  [((id<ComGoogleCommonTruthOrdered>) nil_chk([((ComGoogleCommonTruthIterableSubject *) nil_chk([((ComGoogleCommonTruthTestVerb *) nil_chk(ComGoogleCommonTruthTruth_assert_())) thatWithJavaLangIterable:[((id<JavaUtilMap>) nil_chk([((id<DaggerInternalFactory>) nil_chk(factory)) get])) entrySet]])) containsExactlyElementsInWithJavaLangIterable:[expectedMap entrySet]])) inOrder];
}

+ (id<JavaxInjectProvider>)incrementingIntegerProviderWithInt:(jint)seed {
  return DaggerInternalMapProviderFactoryTest_incrementingIntegerProviderWithInt_(seed);
}

- (void)dealloc {
  RELEASE_(thrown_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "LJavaxInjectProvider;", 0xa, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nullKey);
  methods[2].selector = @selector(nullValue);
  methods[3].selector = @selector(iterationOrder);
  methods[4].selector = @selector(incrementingIntegerProviderWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "thrown_", "LOrgJunitRulesExpectedException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, 6 },
  };
  static const void *ptrTable[] = { (void *)&DaggerInternalMapProviderFactoryTest__Annotations$0, (void *)&DaggerInternalMapProviderFactoryTest__Annotations$1, (void *)&DaggerInternalMapProviderFactoryTest__Annotations$2, "incrementingIntegerProvider", "I", "(I)Ljavax/inject/Provider<Ljava/lang/Integer;>;", (void *)&DaggerInternalMapProviderFactoryTest__Annotations$3, (void *)&DaggerInternalMapProviderFactoryTest__Annotations$4 };
  static const J2ObjcClassInfo _DaggerInternalMapProviderFactoryTest = { "MapProviderFactoryTest", "dagger.internal", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, 7 };
  return &_DaggerInternalMapProviderFactoryTest;
}

@end

void DaggerInternalMapProviderFactoryTest_init(DaggerInternalMapProviderFactoryTest *self) {
  NSObject_init(self);
  JreStrongAssign(&self->thrown_, OrgJunitRulesExpectedException_none());
}

DaggerInternalMapProviderFactoryTest *new_DaggerInternalMapProviderFactoryTest_init() {
  J2OBJC_NEW_IMPL(DaggerInternalMapProviderFactoryTest, init)
}

DaggerInternalMapProviderFactoryTest *create_DaggerInternalMapProviderFactoryTest_init() {
  J2OBJC_CREATE_IMPL(DaggerInternalMapProviderFactoryTest, init)
}

id<JavaxInjectProvider> DaggerInternalMapProviderFactoryTest_incrementingIntegerProviderWithInt_(jint seed) {
  DaggerInternalMapProviderFactoryTest_initialize();
  JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(seed);
  return create_DaggerInternalMapProviderFactoryTest_1_initWithJavaUtilConcurrentAtomicAtomicInteger_(value);
}

IOSObjectArray *DaggerInternalMapProviderFactoryTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalMapProviderFactoryTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalMapProviderFactoryTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalMapProviderFactoryTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRule() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalMapProviderFactoryTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(OrgJunitRunnersJUnit4_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalMapProviderFactoryTest)

@implementation DaggerInternalMapProviderFactoryTest_1

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  DaggerInternalMapProviderFactoryTest_1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (JavaLangInteger *)get {
  return JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) getAndIncrement]);
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDaggerInternalMapProviderFactoryTest;", "incrementingIntegerProviderWithInt:", "Ljava/lang/Object;Ljavax/inject/Provider<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _DaggerInternalMapProviderFactoryTest_1 = { "", "dagger.internal", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, 2, -1 };
  return &_DaggerInternalMapProviderFactoryTest_1;
}

@end

void DaggerInternalMapProviderFactoryTest_1_initWithJavaUtilConcurrentAtomicAtomicInteger_(DaggerInternalMapProviderFactoryTest_1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

DaggerInternalMapProviderFactoryTest_1 *new_DaggerInternalMapProviderFactoryTest_1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(DaggerInternalMapProviderFactoryTest_1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

DaggerInternalMapProviderFactoryTest_1 *create_DaggerInternalMapProviderFactoryTest_1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(DaggerInternalMapProviderFactoryTest_1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}
