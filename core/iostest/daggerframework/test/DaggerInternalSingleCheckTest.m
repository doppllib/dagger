//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "ComGoogleCommonTruthIntegerSubject.h"
#include "ComGoogleCommonTruthTruth.h"
#include "DaggerInternalFactory.h"
#include "DaggerInternalSingleCheck.h"
#include "DaggerInternalSingleCheckTest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/inject/Provider.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"
#include "org/junit/runners/JUnit4.h"

__attribute__((unused)) static IOSObjectArray *DaggerInternalSingleCheckTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DaggerInternalSingleCheckTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *DaggerInternalSingleCheckTest__Annotations$2();

@interface DaggerInternalSingleCheckTest_1 : NSObject < DaggerInternalFactory > {
 @public
  jint i_;
}

- (instancetype)init;

- (JavaLangInteger *)get;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalSingleCheckTest_1)

__attribute__((unused)) static void DaggerInternalSingleCheckTest_1_init(DaggerInternalSingleCheckTest_1 *self);

__attribute__((unused)) static DaggerInternalSingleCheckTest_1 *new_DaggerInternalSingleCheckTest_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalSingleCheckTest_1 *create_DaggerInternalSingleCheckTest_1_init();

@implementation DaggerInternalSingleCheckTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DaggerInternalSingleCheckTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)create_nullPointerException {
  DaggerInternalSingleCheck_providerWithDaggerInternalFactory_(nil);
}

- (void)get {
  id<JavaxInjectProvider> provider = DaggerInternalSingleCheck_providerWithDaggerInternalFactory_(create_DaggerInternalSingleCheckTest_1_init());
  [((ComGoogleCommonTruthIntegerSubject *) nil_chk(ComGoogleCommonTruthTruth_assertThatWithJavaLangInteger_([((id<JavaxInjectProvider>) nil_chk(provider)) get]))) isEqualToWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((ComGoogleCommonTruthIntegerSubject *) nil_chk(ComGoogleCommonTruthTruth_assertThatWithJavaLangInteger_([provider get]))) isEqualToWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((ComGoogleCommonTruthIntegerSubject *) nil_chk(ComGoogleCommonTruthTruth_assertThatWithJavaLangInteger_([provider get]))) isEqualToWithId:JavaLangInteger_valueOfWithInt_(0)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(create_nullPointerException);
  methods[2].selector = @selector(get);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&DaggerInternalSingleCheckTest__Annotations$0, (void *)&DaggerInternalSingleCheckTest__Annotations$1, (void *)&DaggerInternalSingleCheckTest__Annotations$2 };
  static const J2ObjcClassInfo _DaggerInternalSingleCheckTest = { "SingleCheckTest", "dagger.internal", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, 2 };
  return &_DaggerInternalSingleCheckTest;
}

@end

void DaggerInternalSingleCheckTest_init(DaggerInternalSingleCheckTest *self) {
  NSObject_init(self);
}

DaggerInternalSingleCheckTest *new_DaggerInternalSingleCheckTest_init() {
  J2OBJC_NEW_IMPL(DaggerInternalSingleCheckTest, init)
}

DaggerInternalSingleCheckTest *create_DaggerInternalSingleCheckTest_init() {
  J2OBJC_CREATE_IMPL(DaggerInternalSingleCheckTest, init)
}

IOSObjectArray *DaggerInternalSingleCheckTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalSingleCheckTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalSingleCheckTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(OrgJunitRunnersJUnit4_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalSingleCheckTest)

@implementation DaggerInternalSingleCheckTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DaggerInternalSingleCheckTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangInteger *)get {
  return JavaLangInteger_valueOfWithInt_(i_++);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LDaggerInternalSingleCheckTest;", "get", "Ljava/lang/Object;Ldagger/internal/Factory<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _DaggerInternalSingleCheckTest_1 = { "", "dagger.internal", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, 2, -1 };
  return &_DaggerInternalSingleCheckTest_1;
}

@end

void DaggerInternalSingleCheckTest_1_init(DaggerInternalSingleCheckTest_1 *self) {
  NSObject_init(self);
  self->i_ = 0;
}

DaggerInternalSingleCheckTest_1 *new_DaggerInternalSingleCheckTest_1_init() {
  J2OBJC_NEW_IMPL(DaggerInternalSingleCheckTest_1, init)
}

DaggerInternalSingleCheckTest_1 *create_DaggerInternalSingleCheckTest_1_init() {
  J2OBJC_CREATE_IMPL(DaggerInternalSingleCheckTest_1, init)
}
