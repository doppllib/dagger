//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/dagger/core/src/test/java/OneTest.java
//

#include "CoTouchlabDoppelTestingDopplJunitTestRunner.h"
#include "DaggerInternalDoubleCheckTest.h"
#include "DaggerInternalInstanceFactoryTest.h"
#include "DaggerInternalMapProviderFactoryTest.h"
#include "DaggerInternalSetFactoryTest.h"
#include "DaggerInternalSingleCheckTest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OneTest.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/notification/RunListener.h"

@interface OneTest ()

+ (void)runDoppl;

@end

inline IOSObjectArray *OneTest_get_alltests();
inline IOSObjectArray *OneTest_set_alltests(IOSObjectArray *value);
static IOSObjectArray *OneTest_alltests;
J2OBJC_STATIC_FIELD_OBJ(OneTest, alltests, IOSObjectArray *)

__attribute__((unused)) static void OneTest_runDoppl();

@interface OneTest_$1 : JavaLangThread

- (void)run;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OneTest_$1)

__attribute__((unused)) static void OneTest_$1_init(OneTest_$1 *self);

__attribute__((unused)) static OneTest_$1 *new_OneTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OneTest_$1 *create_OneTest_$1_init();

@interface OneTest_$2 : NSObject < CoTouchlabDoppelTestingDopplJunitTestRunner_DopplJunitListener >

- (void)startRunWithNSString:(NSString *)s;

- (void)endRunWithNSString:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OneTest_$2)

__attribute__((unused)) static void OneTest_$2_init(OneTest_$2 *self);

__attribute__((unused)) static OneTest_$2 *new_OneTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OneTest_$2 *create_OneTest_$2_init();

J2OBJC_INITIALIZED_DEFN(OneTest)

@implementation OneTest

+ (void)runTests {
  OneTest_runTests();
}

+ (void)runDoppl {
  OneTest_runDoppl();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OneTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(runTests);
  methods[1].selector = @selector(runDoppl);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "alltests", "[LIOSClass;", .constantValue.asLong = 0, 0xa, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &OneTest_alltests, "LOneTest_BigMemRunListener;" };
  static const J2ObjcClassInfo _OneTest = { "OneTest", NULL, ptrTable, methods, fields, 7, 0x1, 3, 1, -1, 1, -1, -1, -1 };
  return &_OneTest;
}

+ (void)initialize {
  if (self == [OneTest class]) {
    JreStrongAssignAndConsume(&OneTest_alltests, [IOSObjectArray newArrayWithObjects:(id[]){ DaggerInternalDoubleCheckTest_class_(), DaggerInternalInstanceFactoryTest_class_(), DaggerInternalMapProviderFactoryTest_class_(), DaggerInternalSetFactoryTest_class_(), DaggerInternalSingleCheckTest_class_() } count:5 type:IOSClass_class_()]);
    J2OBJC_SET_INITIALIZED(OneTest)
  }
}

@end

void OneTest_runTests() {
  OneTest_initialize();
  [create_OneTest_$1_init() start];
}

void OneTest_runDoppl() {
  @autoreleasepool {
    OneTest_initialize();
    id<JavaUtilList> smoothClasses = create_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(OneTest_alltests));
    IOSObjectArray *classes = [smoothClasses toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[smoothClasses size] type:IOSClass_class_()]];
    CoTouchlabDoppelTestingDopplJunitTestRunner_runWithIOSClassArray_withOrgJunitRunnerNotificationRunListener_withCoTouchlabDoppelTestingDopplJunitTestRunner_DopplJunitListener_(classes, create_OneTest_BigMemRunListener_init(), create_OneTest_$2_init());
  }
}

void OneTest_init(OneTest *self) {
  NSObject_init(self);
}

OneTest *new_OneTest_init() {
  J2OBJC_NEW_IMPL(OneTest, init)
}

OneTest *create_OneTest_init() {
  J2OBJC_CREATE_IMPL(OneTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OneTest)

@implementation OneTest_BigMemRunListener

- (void)testStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  [super testStartedWithOrgJunitRunnerDescription:description_];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C$", @"TRACE Starting ", [((OrgJunitRunnerDescription *) nil_chk(description_)) getClassName], '-', [description_ getMethodName])];
}

- (void)testFinishedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  [super testFinishedWithOrgJunitRunnerDescription:description_];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C$", @"TRACE Finished ", [((OrgJunitRunnerDescription *) nil_chk(description_)) getClassName], '-', [description_ getMethodName])];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OneTest_BigMemRunListener_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testStartedWithOrgJunitRunnerDescription:);
  methods[1].selector = @selector(testFinishedWithOrgJunitRunnerDescription:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "testStarted", "LOrgJunitRunnerDescription;", "LJavaLangException;", "testFinished", "LOneTest;" };
  static const J2ObjcClassInfo _OneTest_BigMemRunListener = { "BigMemRunListener", NULL, ptrTable, methods, NULL, 7, 0x8, 3, 0, 4, -1, -1, -1, -1 };
  return &_OneTest_BigMemRunListener;
}

@end

void OneTest_BigMemRunListener_init(OneTest_BigMemRunListener *self) {
  OrgJunitRunnerNotificationRunListener_init(self);
}

OneTest_BigMemRunListener *new_OneTest_BigMemRunListener_init() {
  J2OBJC_NEW_IMPL(OneTest_BigMemRunListener, init)
}

OneTest_BigMemRunListener *create_OneTest_BigMemRunListener_init() {
  J2OBJC_CREATE_IMPL(OneTest_BigMemRunListener, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OneTest_BigMemRunListener)

@implementation OneTest_$1

- (void)run {
  OneTest_runDoppl();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OneTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOneTest;", "runTests" };
  static const J2ObjcClassInfo _OneTest_$1 = { "", NULL, ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_OneTest_$1;
}

@end

void OneTest_$1_init(OneTest_$1 *self) {
  JavaLangThread_init(self);
}

OneTest_$1 *new_OneTest_$1_init() {
  J2OBJC_NEW_IMPL(OneTest_$1, init)
}

OneTest_$1 *create_OneTest_$1_init() {
  J2OBJC_CREATE_IMPL(OneTest_$1, init)
}

@implementation OneTest_$2

- (void)startRunWithNSString:(NSString *)s {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"GO ", s)];
}

- (void)endRunWithNSString:(NSString *)s {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"STOP ", s)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OneTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(startRunWithNSString:);
  methods[1].selector = @selector(endRunWithNSString:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "startRun", "LNSString;", "endRun", "LOneTest;", "runDoppl" };
  static const J2ObjcClassInfo _OneTest_$2 = { "", NULL, ptrTable, methods, NULL, 7, 0x8008, 3, 0, 3, -1, 4, -1, -1 };
  return &_OneTest_$2;
}

@end

void OneTest_$2_init(OneTest_$2 *self) {
  NSObject_init(self);
}

OneTest_$2 *new_OneTest_$2_init() {
  J2OBJC_NEW_IMPL(OneTest_$2, init)
}

OneTest_$2 *create_OneTest_$2_init() {
  J2OBJC_CREATE_IMPL(OneTest_$2, init)
}
