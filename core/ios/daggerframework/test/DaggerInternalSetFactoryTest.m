//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/dagger/core/src/test/java/dagger/internal/SetFactoryTest.java
//

#include "ComGoogleCommonCollectImmutableSet.h"
#include "ComGoogleCommonTruthIterableSubject.h"
#include "ComGoogleCommonTruthOrdered.h"
#include "ComGoogleCommonTruthTruth.h"
#include "DaggerInternalFactory.h"
#include "DaggerInternalSetFactory.h"
#include "DaggerInternalSetFactoryTest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "javax/inject/Provider.h"
#include "org/junit/Rule.h"
#include "org/junit/Test.h"
#include "org/junit/rules/ExpectedException.h"
#include "org/junit/runner/RunWith.h"
#include "org/junit/runners/JUnit4.h"

@interface DaggerInternalSetFactoryTest ()

+ (id<JavaxInjectProvider>)providerOfWithId:(id)value;

+ (id<JavaxInjectProvider>)incrementingIntegerProviderWithInt:(jint)seed;

+ (id<JavaxInjectProvider>)incrementingIntegerSetProviderWithInt:(jint)seed;

@end

__attribute__((unused)) static id<JavaxInjectProvider> DaggerInternalSetFactoryTest_providerOfWithId_(id value);

__attribute__((unused)) static id<JavaxInjectProvider> DaggerInternalSetFactoryTest_incrementingIntegerProviderWithInt_(jint seed);

__attribute__((unused)) static id<JavaxInjectProvider> DaggerInternalSetFactoryTest_incrementingIntegerSetProviderWithInt_(jint seed);

__attribute__((unused)) static IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$5();

@interface DaggerInternalSetFactoryTest_$1 : NSObject < JavaxInjectProvider > {
 @public
  id val$value_;
}

- (id)get;

- (instancetype)initWithId:(id)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalSetFactoryTest_$1)

J2OBJC_FIELD_SETTER(DaggerInternalSetFactoryTest_$1, val$value_, id)

__attribute__((unused)) static void DaggerInternalSetFactoryTest_$1_initWithId_(DaggerInternalSetFactoryTest_$1 *self, id capture$0);

__attribute__((unused)) static DaggerInternalSetFactoryTest_$1 *new_DaggerInternalSetFactoryTest_$1_initWithId_(id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalSetFactoryTest_$1 *create_DaggerInternalSetFactoryTest_$1_initWithId_(id capture$0);

@interface DaggerInternalSetFactoryTest_$2 : NSObject < JavaxInjectProvider > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
}

- (JavaLangInteger *)get;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalSetFactoryTest_$2)

J2OBJC_FIELD_SETTER(DaggerInternalSetFactoryTest_$2, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void DaggerInternalSetFactoryTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(DaggerInternalSetFactoryTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static DaggerInternalSetFactoryTest_$2 *new_DaggerInternalSetFactoryTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalSetFactoryTest_$2 *create_DaggerInternalSetFactoryTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface DaggerInternalSetFactoryTest_$3 : NSObject < JavaxInjectProvider > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
}

- (id<JavaUtilSet>)get;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalSetFactoryTest_$3)

J2OBJC_FIELD_SETTER(DaggerInternalSetFactoryTest_$3, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void DaggerInternalSetFactoryTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(DaggerInternalSetFactoryTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static DaggerInternalSetFactoryTest_$3 *new_DaggerInternalSetFactoryTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalSetFactoryTest_$3 *create_DaggerInternalSetFactoryTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@implementation DaggerInternalSetFactoryTest

- (void)providerReturnsNull {
  id<DaggerInternalFactory> factory = [((DaggerInternalSetFactory_Builder *) nil_chk([((DaggerInternalSetFactory_Builder *) nil_chk(DaggerInternalSetFactory_builderWithInt_withInt_(0, 1))) addCollectionProviderWithJavaxInjectProvider:DaggerInternalSetFactoryTest_providerOfWithId_(nil)])) build];
  [((OrgJunitRulesExpectedException *) nil_chk(thrown_)) expectWithIOSClass:JavaLangNullPointerException_class_()];
  [((id<DaggerInternalFactory>) nil_chk(factory)) get];
}

- (void)providerReturnsNullSet {
  id<DaggerInternalFactory> factory = [((DaggerInternalSetFactory_Builder *) nil_chk([((DaggerInternalSetFactory_Builder *) nil_chk(DaggerInternalSetFactory_builderWithInt_withInt_(1, 0))) addProviderWithJavaxInjectProvider:DaggerInternalSetFactoryTest_providerOfWithId_(nil)])) build];
  [((OrgJunitRulesExpectedException *) nil_chk(thrown_)) expectWithIOSClass:JavaLangNullPointerException_class_()];
  [((id<DaggerInternalFactory>) nil_chk(factory)) get];
}

- (void)providerReturnsSetWithNullElement {
  id<JavaUtilSet> set = create_JavaUtilLinkedHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), nil, JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]));
  id<DaggerInternalFactory> factory = [((DaggerInternalSetFactory_Builder *) nil_chk([((DaggerInternalSetFactory_Builder *) nil_chk(DaggerInternalSetFactory_builderWithInt_withInt_(0, 1))) addCollectionProviderWithJavaxInjectProvider:DaggerInternalSetFactoryTest_providerOfWithId_(set)])) build];
  [((OrgJunitRulesExpectedException *) nil_chk(thrown_)) expectWithIOSClass:JavaLangNullPointerException_class_()];
  [((id<DaggerInternalFactory>) nil_chk(factory)) get];
}

- (void)invokesProvidersEveryTime {
  id<DaggerInternalFactory> factory = [((DaggerInternalSetFactory_Builder *) nil_chk([((DaggerInternalSetFactory_Builder *) nil_chk([((DaggerInternalSetFactory_Builder *) nil_chk([((DaggerInternalSetFactory_Builder *) nil_chk([((DaggerInternalSetFactory_Builder *) nil_chk(DaggerInternalSetFactory_builderWithInt_withInt_(2, 2))) addProviderWithJavaxInjectProvider:DaggerInternalSetFactoryTest_incrementingIntegerProviderWithInt_(0)])) addProviderWithJavaxInjectProvider:DaggerInternalSetFactoryTest_incrementingIntegerProviderWithInt_(10)])) addCollectionProviderWithJavaxInjectProvider:DaggerInternalSetFactoryTest_incrementingIntegerSetProviderWithInt_(20)])) addCollectionProviderWithJavaxInjectProvider:DaggerInternalSetFactoryTest_incrementingIntegerSetProviderWithInt_(30)])) build];
  [((ComGoogleCommonTruthIterableSubject *) nil_chk(ComGoogleCommonTruthTruth_assertThatWithJavaLangIterable_([((id<DaggerInternalFactory>) nil_chk(factory)) get]))) containsExactlyWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(20), JavaLangInteger_valueOfWithInt_(21), JavaLangInteger_valueOfWithInt_(30), JavaLangInteger_valueOfWithInt_(31) } count:6 type:NSObject_class_()]];
  [((ComGoogleCommonTruthIterableSubject *) nil_chk(ComGoogleCommonTruthTruth_assertThatWithJavaLangIterable_([factory get]))) containsExactlyWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(11), JavaLangInteger_valueOfWithInt_(22), JavaLangInteger_valueOfWithInt_(23), JavaLangInteger_valueOfWithInt_(32), JavaLangInteger_valueOfWithInt_(33) } count:6 type:NSObject_class_()]];
  [((ComGoogleCommonTruthIterableSubject *) nil_chk(ComGoogleCommonTruthTruth_assertThatWithJavaLangIterable_([factory get]))) containsExactlyWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(12), JavaLangInteger_valueOfWithInt_(24), JavaLangInteger_valueOfWithInt_(25), JavaLangInteger_valueOfWithInt_(34), JavaLangInteger_valueOfWithInt_(35) } count:6 type:NSObject_class_()]];
}

+ (id<JavaxInjectProvider>)providerOfWithId:(id)value {
  return DaggerInternalSetFactoryTest_providerOfWithId_(value);
}

+ (id<JavaxInjectProvider>)incrementingIntegerProviderWithInt:(jint)seed {
  return DaggerInternalSetFactoryTest_incrementingIntegerProviderWithInt_(seed);
}

+ (id<JavaxInjectProvider>)incrementingIntegerSetProviderWithInt:(jint)seed {
  return DaggerInternalSetFactoryTest_incrementingIntegerSetProviderWithInt_(seed);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DaggerInternalSetFactoryTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(thrown_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "LJavaxInjectProvider;", 0xa, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaxInjectProvider;", 0xa, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaxInjectProvider;", 0xa, 10, 8, -1, 11, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(providerReturnsNull);
  methods[1].selector = @selector(providerReturnsNullSet);
  methods[2].selector = @selector(providerReturnsSetWithNullElement);
  methods[3].selector = @selector(invokesProvidersEveryTime);
  methods[4].selector = @selector(providerOfWithId:);
  methods[5].selector = @selector(incrementingIntegerProviderWithInt:);
  methods[6].selector = @selector(incrementingIntegerSetProviderWithInt:);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "thrown_", "LOrgJunitRulesExpectedException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, 12 },
  };
  static const void *ptrTable[] = { (void *)&DaggerInternalSetFactoryTest__Annotations$0, (void *)&DaggerInternalSetFactoryTest__Annotations$1, (void *)&DaggerInternalSetFactoryTest__Annotations$2, (void *)&DaggerInternalSetFactoryTest__Annotations$3, "providerOf", "LNSObject;", "<T:Ljava/lang/Object;>(TT;)Ljavax/inject/Provider<TT;>;", "incrementingIntegerProvider", "I", "(I)Ljavax/inject/Provider<Ljava/lang/Integer;>;", "incrementingIntegerSetProvider", "(I)Ljavax/inject/Provider<Ljava/util/Set<Ljava/lang/Integer;>;>;", (void *)&DaggerInternalSetFactoryTest__Annotations$4, (void *)&DaggerInternalSetFactoryTest__Annotations$5 };
  static const J2ObjcClassInfo _DaggerInternalSetFactoryTest = { "SetFactoryTest", "dagger.internal", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, 13 };
  return &_DaggerInternalSetFactoryTest;
}

@end

id<JavaxInjectProvider> DaggerInternalSetFactoryTest_providerOfWithId_(id value) {
  DaggerInternalSetFactoryTest_initialize();
  return create_DaggerInternalSetFactoryTest_$1_initWithId_(value);
}

id<JavaxInjectProvider> DaggerInternalSetFactoryTest_incrementingIntegerProviderWithInt_(jint seed) {
  DaggerInternalSetFactoryTest_initialize();
  JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(seed);
  return create_DaggerInternalSetFactoryTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(value);
}

id<JavaxInjectProvider> DaggerInternalSetFactoryTest_incrementingIntegerSetProviderWithInt_(jint seed) {
  DaggerInternalSetFactoryTest_initialize();
  JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(seed);
  return create_DaggerInternalSetFactoryTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(value);
}

void DaggerInternalSetFactoryTest_init(DaggerInternalSetFactoryTest *self) {
  NSObject_init(self);
  JreStrongAssign(&self->thrown_, OrgJunitRulesExpectedException_none());
}

DaggerInternalSetFactoryTest *new_DaggerInternalSetFactoryTest_init() {
  J2OBJC_NEW_IMPL(DaggerInternalSetFactoryTest, init)
}

DaggerInternalSetFactoryTest *create_DaggerInternalSetFactoryTest_init() {
  J2OBJC_CREATE_IMPL(DaggerInternalSetFactoryTest, init)
}

IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRule() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalSetFactoryTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(OrgJunitRunnersJUnit4_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalSetFactoryTest)

@implementation DaggerInternalSetFactoryTest_$1

- (id)get {
  return val$value_;
}

- (instancetype)initWithId:(id)capture$0 {
  DaggerInternalSetFactoryTest_$1_initWithId_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(get);
  methods[1].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "LNSObject;", "(TT;)V", "TT;", "LDaggerInternalSetFactoryTest;", "providerOfWithId:", "Ljava/lang/Object;Ljavax/inject/Provider<TT;>;" };
  static const J2ObjcClassInfo _DaggerInternalSetFactoryTest_$1 = { "", "dagger.internal", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_DaggerInternalSetFactoryTest_$1;
}

@end

void DaggerInternalSetFactoryTest_$1_initWithId_(DaggerInternalSetFactoryTest_$1 *self, id capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

DaggerInternalSetFactoryTest_$1 *new_DaggerInternalSetFactoryTest_$1_initWithId_(id capture$0) {
  J2OBJC_NEW_IMPL(DaggerInternalSetFactoryTest_$1, initWithId_, capture$0)
}

DaggerInternalSetFactoryTest_$1 *create_DaggerInternalSetFactoryTest_$1_initWithId_(id capture$0) {
  J2OBJC_CREATE_IMPL(DaggerInternalSetFactoryTest_$1, initWithId_, capture$0)
}

@implementation DaggerInternalSetFactoryTest_$2

- (JavaLangInteger *)get {
  return JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) getAndIncrement]);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  DaggerInternalSetFactoryTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(get);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LDaggerInternalSetFactoryTest;", "incrementingIntegerProviderWithInt:", "Ljava/lang/Object;Ljavax/inject/Provider<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _DaggerInternalSetFactoryTest_$2 = { "", "dagger.internal", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, 3, -1 };
  return &_DaggerInternalSetFactoryTest_$2;
}

@end

void DaggerInternalSetFactoryTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(DaggerInternalSetFactoryTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

DaggerInternalSetFactoryTest_$2 *new_DaggerInternalSetFactoryTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(DaggerInternalSetFactoryTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

DaggerInternalSetFactoryTest_$2 *create_DaggerInternalSetFactoryTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(DaggerInternalSetFactoryTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation DaggerInternalSetFactoryTest_$3

- (id<JavaUtilSet>)get {
  return ComGoogleCommonCollectImmutableSet_ofWithId_withId_(JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) getAndIncrement]), JavaLangInteger_valueOfWithInt_([val$value_ getAndIncrement]));
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  DaggerInternalSetFactoryTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(get);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Set<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LDaggerInternalSetFactoryTest;", "incrementingIntegerSetProviderWithInt:", "Ljava/lang/Object;Ljavax/inject/Provider<Ljava/util/Set<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _DaggerInternalSetFactoryTest_$3 = { "", "dagger.internal", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_DaggerInternalSetFactoryTest_$3;
}

@end

void DaggerInternalSetFactoryTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(DaggerInternalSetFactoryTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

DaggerInternalSetFactoryTest_$3 *new_DaggerInternalSetFactoryTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(DaggerInternalSetFactoryTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

DaggerInternalSetFactoryTest_$3 *create_DaggerInternalSetFactoryTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(DaggerInternalSetFactoryTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}
