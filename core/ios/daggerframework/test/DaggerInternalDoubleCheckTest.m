//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/dagger/core/src/test/java/dagger/internal/DoubleCheckTest.java
//

#include "ComGoogleCommonCollectLists.h"
#include "ComGoogleCommonCollectSets.h"
#include "ComGoogleCommonTruthIntegerSubject.h"
#include "ComGoogleCommonTruthSubject.h"
#include "ComGoogleCommonTruthTestVerb.h"
#include "ComGoogleCommonTruthTruth.h"
#include "ComGoogleCommonUtilConcurrentUninterruptibles.h"
#include "DaggerInternalDoubleCheck.h"
#include "DaggerInternalDoubleCheckTest.h"
#include "DaggerLazy.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StackOverflowError.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "javax/inject/Provider.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"
#include "org/junit/runners/JUnit4.h"

inline id<JavaxInjectProvider> DaggerInternalDoubleCheckTest_get_DOUBLE_CHECK_OBJECT_PROVIDER();
static id<JavaxInjectProvider> DaggerInternalDoubleCheckTest_DOUBLE_CHECK_OBJECT_PROVIDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DaggerInternalDoubleCheckTest, DOUBLE_CHECK_OBJECT_PROVIDER, id<JavaxInjectProvider>)

__attribute__((unused)) static IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$8();

@interface DaggerInternalDoubleCheckTest_LatchedProvider : NSObject < JavaxInjectProvider > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *provisions_;
  JavaUtilConcurrentCountDownLatch *latch_;
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch;

- (id)get;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalDoubleCheckTest_LatchedProvider)

J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckTest_LatchedProvider, provisions_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckTest_LatchedProvider, latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void DaggerInternalDoubleCheckTest_LatchedProvider_initWithJavaUtilConcurrentCountDownLatch_(DaggerInternalDoubleCheckTest_LatchedProvider *self, JavaUtilConcurrentCountDownLatch *latch);

__attribute__((unused)) static DaggerInternalDoubleCheckTest_LatchedProvider *new_DaggerInternalDoubleCheckTest_LatchedProvider_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *latch) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalDoubleCheckTest_LatchedProvider *create_DaggerInternalDoubleCheckTest_LatchedProvider_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *latch);

J2OBJC_TYPE_LITERAL_HEADER(DaggerInternalDoubleCheckTest_LatchedProvider)

@interface DaggerInternalDoubleCheckTest_$1 : NSObject < JavaxInjectProvider >

- (id)get;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalDoubleCheckTest_$1)

__attribute__((unused)) static void DaggerInternalDoubleCheckTest_$1_init(DaggerInternalDoubleCheckTest_$1 *self);

__attribute__((unused)) static DaggerInternalDoubleCheckTest_$1 *new_DaggerInternalDoubleCheckTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalDoubleCheckTest_$1 *create_DaggerInternalDoubleCheckTest_$1_init();

@interface DaggerInternalDoubleCheckTest_$2 : NSObject < JavaUtilConcurrentCallable > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
  id<DaggerLazy> val$lazy_;
}

- (id)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                                          withDaggerLazy:(id<DaggerLazy>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalDoubleCheckTest_$2)

J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckTest_$2, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckTest_$2, val$lazy_, id<DaggerLazy>)

__attribute__((unused)) static void DaggerInternalDoubleCheckTest_$2_initWithJavaUtilConcurrentCountDownLatch_withDaggerLazy_(DaggerInternalDoubleCheckTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0, id<DaggerLazy> capture$1);

__attribute__((unused)) static DaggerInternalDoubleCheckTest_$2 *new_DaggerInternalDoubleCheckTest_$2_initWithJavaUtilConcurrentCountDownLatch_withDaggerLazy_(JavaUtilConcurrentCountDownLatch *capture$0, id<DaggerLazy> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalDoubleCheckTest_$2 *create_DaggerInternalDoubleCheckTest_$2_initWithJavaUtilConcurrentCountDownLatch_withDaggerLazy_(JavaUtilConcurrentCountDownLatch *capture$0, id<DaggerLazy> capture$1);

@interface DaggerInternalDoubleCheckTest_$3 : NSObject < JavaxInjectProvider > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$doubleCheckReference_;
}

- (id)get;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalDoubleCheckTest_$3)

J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckTest_$3, val$doubleCheckReference_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void DaggerInternalDoubleCheckTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(DaggerInternalDoubleCheckTest_$3 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static DaggerInternalDoubleCheckTest_$3 *new_DaggerInternalDoubleCheckTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalDoubleCheckTest_$3 *create_DaggerInternalDoubleCheckTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface DaggerInternalDoubleCheckTest_$4 : NSObject < JavaxInjectProvider > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$invocationCount_;
  JavaUtilConcurrentAtomicAtomicReference *val$doubleCheckReference_;
  id val$object_;
}

- (id)get;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                  withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1
                                                       withId:(id)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalDoubleCheckTest_$4)

J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckTest_$4, val$invocationCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckTest_$4, val$doubleCheckReference_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckTest_$4, val$object_, id)

__attribute__((unused)) static void DaggerInternalDoubleCheckTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_withId_(DaggerInternalDoubleCheckTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id capture$2);

__attribute__((unused)) static DaggerInternalDoubleCheckTest_$4 *new_DaggerInternalDoubleCheckTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalDoubleCheckTest_$4 *create_DaggerInternalDoubleCheckTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id capture$2);

@interface DaggerInternalDoubleCheckTest_$5 : NSObject < JavaxInjectProvider > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$invocationCount_;
  JavaUtilConcurrentAtomicAtomicReference *val$doubleCheckReference_;
}

- (id)get;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                  withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(DaggerInternalDoubleCheckTest_$5)

J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckTest_$5, val$invocationCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckTest_$5, val$doubleCheckReference_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void DaggerInternalDoubleCheckTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(DaggerInternalDoubleCheckTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1);

__attribute__((unused)) static DaggerInternalDoubleCheckTest_$5 *new_DaggerInternalDoubleCheckTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalDoubleCheckTest_$5 *create_DaggerInternalDoubleCheckTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1);

J2OBJC_INITIALIZED_DEFN(DaggerInternalDoubleCheckTest)

@implementation DaggerInternalDoubleCheckTest

- (void)provider_nullPointerException {
  @try {
    DaggerInternalDoubleCheck_providerWithJavaxInjectProvider_(nil);
    OrgJunitAssert_fail();
  }
  @catch (JavaLangNullPointerException *expected) {
  }
}

- (void)lazy_nullPointerException {
  @try {
    DaggerInternalDoubleCheck_lazyWithJavaxInjectProvider_(nil);
    OrgJunitAssert_fail();
  }
  @catch (JavaLangNullPointerException *expected) {
  }
}

- (void)doubleWrapping_provider {
  [((ComGoogleCommonTruthSubject *) nil_chk(ComGoogleCommonTruthTruth_assertThatWithId_(DaggerInternalDoubleCheck_providerWithJavaxInjectProvider_(DaggerInternalDoubleCheckTest_DOUBLE_CHECK_OBJECT_PROVIDER)))) isSameAsWithId:DaggerInternalDoubleCheckTest_DOUBLE_CHECK_OBJECT_PROVIDER];
}

- (void)doubleWrapping_lazy {
  [((ComGoogleCommonTruthSubject *) nil_chk(ComGoogleCommonTruthTruth_assertThatWithId_(DaggerInternalDoubleCheck_lazyWithJavaxInjectProvider_(DaggerInternalDoubleCheckTest_DOUBLE_CHECK_OBJECT_PROVIDER)))) isSameAsWithId:DaggerInternalDoubleCheckTest_DOUBLE_CHECK_OBJECT_PROVIDER];
}

- (void)get {
  jint numThreads = 10;
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(numThreads);
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(numThreads);
  DaggerInternalDoubleCheckTest_LatchedProvider *provider = create_DaggerInternalDoubleCheckTest_LatchedProvider_initWithJavaUtilConcurrentCountDownLatch_(latch);
  id<DaggerLazy> lazy = DaggerInternalDoubleCheck_lazyWithJavaxInjectProvider_(provider);
  id<JavaUtilList> tasks = ComGoogleCommonCollectLists_newArrayListWithCapacityWithInt_(numThreads);
  for (jint i = 0; i < numThreads; i++) {
    [((id<JavaUtilList>) nil_chk(tasks)) addWithId:create_DaggerInternalDoubleCheckTest_$2_initWithJavaUtilConcurrentCountDownLatch_withDaggerLazy_(latch, lazy)];
  }
  id<JavaUtilList> futures = [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) invokeAllWithJavaUtilCollection:tasks];
  [((ComGoogleCommonTruthIntegerSubject *) nil_chk([((ComGoogleCommonTruthTestVerb *) nil_chk(ComGoogleCommonTruthTruth_assert_())) thatWithJavaLangInteger:JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(provider->provisions_)) get])])) isEqualToWithId:JavaLangInteger_valueOfWithInt_(1)];
  id<JavaUtilSet> results = ComGoogleCommonCollectSets_newIdentityHashSet();
  for (id<JavaUtilConcurrentFuture> __strong future in nil_chk(futures)) {
    [((id<JavaUtilSet>) nil_chk(results)) addWithId:[((id<JavaUtilConcurrentFuture>) nil_chk(future)) get]];
  }
  [((ComGoogleCommonTruthIntegerSubject *) nil_chk([((ComGoogleCommonTruthTestVerb *) nil_chk(ComGoogleCommonTruthTruth_assert_())) thatWithJavaLangInteger:JavaLangInteger_valueOfWithInt_([((id<JavaUtilSet>) nil_chk(results)) size])])) isEqualToWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (void)reentranceWithoutCondition_throwsStackOverflow {
  JavaUtilConcurrentAtomicAtomicReference *doubleCheckReference = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<JavaxInjectProvider> doubleCheck = DaggerInternalDoubleCheck_providerWithJavaxInjectProvider_(create_DaggerInternalDoubleCheckTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(doubleCheckReference));
  [doubleCheckReference setWithId:doubleCheck];
  @try {
    [((id<JavaxInjectProvider>) nil_chk(doubleCheck)) get];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangStackOverflowError *expected) {
  }
}

- (void)reentranceReturningSameInstance {
  JavaUtilConcurrentAtomicAtomicReference *doubleCheckReference = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicInteger *invocationCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id object = create_NSObject_init();
  id<JavaxInjectProvider> doubleCheck = DaggerInternalDoubleCheck_providerWithJavaxInjectProvider_(create_DaggerInternalDoubleCheckTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_withId_(invocationCount, doubleCheckReference, object));
  [doubleCheckReference setWithId:doubleCheck];
  [((ComGoogleCommonTruthSubject *) nil_chk(ComGoogleCommonTruthTruth_assertThatWithId_([((id<JavaxInjectProvider>) nil_chk(doubleCheck)) get]))) isSameAsWithId:object];
}

- (void)reentranceReturningDifferentInstances_throwsIllegalStateException {
  JavaUtilConcurrentAtomicAtomicReference *doubleCheckReference = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicInteger *invocationCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<JavaxInjectProvider> doubleCheck = DaggerInternalDoubleCheck_providerWithJavaxInjectProvider_(create_DaggerInternalDoubleCheckTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(invocationCount, doubleCheckReference));
  [doubleCheckReference setWithId:doubleCheck];
  @try {
    [((id<JavaxInjectProvider>) nil_chk(doubleCheck)) get];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangIllegalStateException *expected) {
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DaggerInternalDoubleCheckTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(provider_nullPointerException);
  methods[1].selector = @selector(lazy_nullPointerException);
  methods[2].selector = @selector(doubleWrapping_provider);
  methods[3].selector = @selector(doubleWrapping_lazy);
  methods[4].selector = @selector(get);
  methods[5].selector = @selector(reentranceWithoutCondition_throwsStackOverflow);
  methods[6].selector = @selector(reentranceReturningSameInstance);
  methods[7].selector = @selector(reentranceReturningDifferentInstances_throwsIllegalStateException);
  methods[8].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DOUBLE_CHECK_OBJECT_PROVIDER", "LJavaxInjectProvider;", .constantValue.asLong = 0, 0x1a, -1, 9, 10, -1 },
  };
  static const void *ptrTable[] = { (void *)&DaggerInternalDoubleCheckTest__Annotations$0, (void *)&DaggerInternalDoubleCheckTest__Annotations$1, (void *)&DaggerInternalDoubleCheckTest__Annotations$2, (void *)&DaggerInternalDoubleCheckTest__Annotations$3, "LJavaLangException;", (void *)&DaggerInternalDoubleCheckTest__Annotations$4, (void *)&DaggerInternalDoubleCheckTest__Annotations$5, (void *)&DaggerInternalDoubleCheckTest__Annotations$6, (void *)&DaggerInternalDoubleCheckTest__Annotations$7, &DaggerInternalDoubleCheckTest_DOUBLE_CHECK_OBJECT_PROVIDER, "Ljavax/inject/Provider<Ljava/lang/Object;>;", "LDaggerInternalDoubleCheckTest_LatchedProvider;", (void *)&DaggerInternalDoubleCheckTest__Annotations$8 };
  static const J2ObjcClassInfo _DaggerInternalDoubleCheckTest = { "DoubleCheckTest", "dagger.internal", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, 11, -1, -1, 12 };
  return &_DaggerInternalDoubleCheckTest;
}

+ (void)initialize {
  if (self == [DaggerInternalDoubleCheckTest class]) {
    JreStrongAssign(&DaggerInternalDoubleCheckTest_DOUBLE_CHECK_OBJECT_PROVIDER, DaggerInternalDoubleCheck_providerWithJavaxInjectProvider_(create_DaggerInternalDoubleCheckTest_$1_init()));
    J2OBJC_SET_INITIALIZED(DaggerInternalDoubleCheckTest)
  }
}

@end

void DaggerInternalDoubleCheckTest_init(DaggerInternalDoubleCheckTest *self) {
  NSObject_init(self);
}

DaggerInternalDoubleCheckTest *new_DaggerInternalDoubleCheckTest_init() {
  J2OBJC_NEW_IMPL(DaggerInternalDoubleCheckTest, init)
}

DaggerInternalDoubleCheckTest *create_DaggerInternalDoubleCheckTest_init() {
  J2OBJC_CREATE_IMPL(DaggerInternalDoubleCheckTest, init)
}

IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *DaggerInternalDoubleCheckTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(OrgJunitRunnersJUnit4_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalDoubleCheckTest)

@implementation DaggerInternalDoubleCheckTest_LatchedProvider

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch {
  DaggerInternalDoubleCheckTest_LatchedProvider_initWithJavaUtilConcurrentCountDownLatch_(self, latch);
  return self;
}

- (id)get {
  if (latch_ != nil) {
    ComGoogleCommonUtilConcurrentUninterruptibles_awaitUninterruptiblyWithJavaUtilConcurrentCountDownLatch_(latch_);
  }
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(provisions_)) incrementAndGet];
  return create_NSObject_init();
}

- (void)dealloc {
  RELEASE_(provisions_);
  RELEASE_(latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "provisions_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;", "LDaggerInternalDoubleCheckTest;", "Ljava/lang/Object;Ljavax/inject/Provider<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _DaggerInternalDoubleCheckTest_LatchedProvider = { "LatchedProvider", "dagger.internal", ptrTable, methods, fields, 7, 0xa, 2, 2, 1, -1, -1, 2, -1 };
  return &_DaggerInternalDoubleCheckTest_LatchedProvider;
}

@end

void DaggerInternalDoubleCheckTest_LatchedProvider_initWithJavaUtilConcurrentCountDownLatch_(DaggerInternalDoubleCheckTest_LatchedProvider *self, JavaUtilConcurrentCountDownLatch *latch) {
  NSObject_init(self);
  JreStrongAssign(&self->latch_, latch);
  JreStrongAssignAndConsume(&self->provisions_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

DaggerInternalDoubleCheckTest_LatchedProvider *new_DaggerInternalDoubleCheckTest_LatchedProvider_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *latch) {
  J2OBJC_NEW_IMPL(DaggerInternalDoubleCheckTest_LatchedProvider, initWithJavaUtilConcurrentCountDownLatch_, latch)
}

DaggerInternalDoubleCheckTest_LatchedProvider *create_DaggerInternalDoubleCheckTest_LatchedProvider_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *latch) {
  J2OBJC_CREATE_IMPL(DaggerInternalDoubleCheckTest_LatchedProvider, initWithJavaUtilConcurrentCountDownLatch_, latch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalDoubleCheckTest_LatchedProvider)

@implementation DaggerInternalDoubleCheckTest_$1

- (id)get {
  return create_NSObject_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DaggerInternalDoubleCheckTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(get);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LDaggerInternalDoubleCheckTest;", "Ljava/lang/Object;Ljavax/inject/Provider<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _DaggerInternalDoubleCheckTest_$1 = { "", "dagger.internal", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, -1, 1, -1 };
  return &_DaggerInternalDoubleCheckTest_$1;
}

@end

void DaggerInternalDoubleCheckTest_$1_init(DaggerInternalDoubleCheckTest_$1 *self) {
  NSObject_init(self);
}

DaggerInternalDoubleCheckTest_$1 *new_DaggerInternalDoubleCheckTest_$1_init() {
  J2OBJC_NEW_IMPL(DaggerInternalDoubleCheckTest_$1, init)
}

DaggerInternalDoubleCheckTest_$1 *create_DaggerInternalDoubleCheckTest_$1_init() {
  J2OBJC_CREATE_IMPL(DaggerInternalDoubleCheckTest_$1, init)
}

@implementation DaggerInternalDoubleCheckTest_$2

- (id)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  return [((id<DaggerLazy>) nil_chk(val$lazy_)) get];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                                          withDaggerLazy:(id<DaggerLazy>)capture$1 {
  DaggerInternalDoubleCheckTest_$2_initWithJavaUtilConcurrentCountDownLatch_withDaggerLazy_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  RELEASE_(val$lazy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withDaggerLazy:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$lazy_", "LDaggerLazy;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LJavaUtilConcurrentCountDownLatch;LDaggerLazy;", "(Ljava/util/concurrent/CountDownLatch;Ldagger/Lazy<Ljava/lang/Object;>;)V", "Ldagger/Lazy<Ljava/lang/Object;>;", "LDaggerInternalDoubleCheckTest;", "get", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _DaggerInternalDoubleCheckTest_$2 = { "", "dagger.internal", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_DaggerInternalDoubleCheckTest_$2;
}

@end

void DaggerInternalDoubleCheckTest_$2_initWithJavaUtilConcurrentCountDownLatch_withDaggerLazy_(DaggerInternalDoubleCheckTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0, id<DaggerLazy> capture$1) {
  JreStrongAssign(&self->val$latch_, capture$0);
  JreStrongAssign(&self->val$lazy_, capture$1);
  NSObject_init(self);
}

DaggerInternalDoubleCheckTest_$2 *new_DaggerInternalDoubleCheckTest_$2_initWithJavaUtilConcurrentCountDownLatch_withDaggerLazy_(JavaUtilConcurrentCountDownLatch *capture$0, id<DaggerLazy> capture$1) {
  J2OBJC_NEW_IMPL(DaggerInternalDoubleCheckTest_$2, initWithJavaUtilConcurrentCountDownLatch_withDaggerLazy_, capture$0, capture$1)
}

DaggerInternalDoubleCheckTest_$2 *create_DaggerInternalDoubleCheckTest_$2_initWithJavaUtilConcurrentCountDownLatch_withDaggerLazy_(JavaUtilConcurrentCountDownLatch *capture$0, id<DaggerLazy> capture$1) {
  J2OBJC_CREATE_IMPL(DaggerInternalDoubleCheckTest_$2, initWithJavaUtilConcurrentCountDownLatch_withDaggerLazy_, capture$0, capture$1)
}

@implementation DaggerInternalDoubleCheckTest_$3

- (id)get {
  return [((id<JavaxInjectProvider>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$doubleCheckReference_)) get])) get];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  DaggerInternalDoubleCheckTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$doubleCheckReference_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(get);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$doubleCheckReference_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljavax/inject/Provider<Ljava/lang/Object;>;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljavax/inject/Provider<Ljava/lang/Object;>;>;", "LDaggerInternalDoubleCheckTest;", "reentranceWithoutCondition_throwsStackOverflow", "Ljava/lang/Object;Ljavax/inject/Provider<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _DaggerInternalDoubleCheckTest_$3 = { "", "dagger.internal", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_DaggerInternalDoubleCheckTest_$3;
}

@end

void DaggerInternalDoubleCheckTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(DaggerInternalDoubleCheckTest_$3 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$doubleCheckReference_, capture$0);
  NSObject_init(self);
}

DaggerInternalDoubleCheckTest_$3 *new_DaggerInternalDoubleCheckTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(DaggerInternalDoubleCheckTest_$3, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

DaggerInternalDoubleCheckTest_$3 *create_DaggerInternalDoubleCheckTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(DaggerInternalDoubleCheckTest_$3, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation DaggerInternalDoubleCheckTest_$4

- (id)get {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$invocationCount_)) incrementAndGet] == 1) {
    [((id<JavaxInjectProvider>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$doubleCheckReference_)) get])) get];
  }
  return val$object_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                  withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1
                                                       withId:(id)capture$2 {
  DaggerInternalDoubleCheckTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_withId_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$invocationCount_);
  RELEASE_(val$doubleCheckReference_);
  RELEASE_(val$object_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(get);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicReference:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$invocationCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$doubleCheckReference_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$object_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicReference;LNSObject;", "(Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/atomic/AtomicReference<Ljavax/inject/Provider<Ljava/lang/Object;>;>;Ljava/lang/Object;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljavax/inject/Provider<Ljava/lang/Object;>;>;", "LDaggerInternalDoubleCheckTest;", "reentranceReturningSameInstance", "Ljava/lang/Object;Ljavax/inject/Provider<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _DaggerInternalDoubleCheckTest_$4 = { "", "dagger.internal", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, 5, -1 };
  return &_DaggerInternalDoubleCheckTest_$4;
}

@end

void DaggerInternalDoubleCheckTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_withId_(DaggerInternalDoubleCheckTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id capture$2) {
  JreStrongAssign(&self->val$invocationCount_, capture$0);
  JreStrongAssign(&self->val$doubleCheckReference_, capture$1);
  JreStrongAssign(&self->val$object_, capture$2);
  NSObject_init(self);
}

DaggerInternalDoubleCheckTest_$4 *new_DaggerInternalDoubleCheckTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id capture$2) {
  J2OBJC_NEW_IMPL(DaggerInternalDoubleCheckTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_withId_, capture$0, capture$1, capture$2)
}

DaggerInternalDoubleCheckTest_$4 *create_DaggerInternalDoubleCheckTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, id capture$2) {
  J2OBJC_CREATE_IMPL(DaggerInternalDoubleCheckTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_withId_, capture$0, capture$1, capture$2)
}

@implementation DaggerInternalDoubleCheckTest_$5

- (id)get {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$invocationCount_)) incrementAndGet] == 1) {
    [((id<JavaxInjectProvider>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$doubleCheckReference_)) get])) get];
  }
  return create_NSObject_init();
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                  withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1 {
  DaggerInternalDoubleCheckTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$invocationCount_);
  RELEASE_(val$doubleCheckReference_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(get);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$invocationCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$doubleCheckReference_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/atomic/AtomicReference<Ljavax/inject/Provider<Ljava/lang/Object;>;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljavax/inject/Provider<Ljava/lang/Object;>;>;", "LDaggerInternalDoubleCheckTest;", "reentranceReturningDifferentInstances_throwsIllegalStateException", "Ljava/lang/Object;Ljavax/inject/Provider<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _DaggerInternalDoubleCheckTest_$5 = { "", "dagger.internal", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, 5, -1 };
  return &_DaggerInternalDoubleCheckTest_$5;
}

@end

void DaggerInternalDoubleCheckTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(DaggerInternalDoubleCheckTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  JreStrongAssign(&self->val$invocationCount_, capture$0);
  JreStrongAssign(&self->val$doubleCheckReference_, capture$1);
  NSObject_init(self);
}

DaggerInternalDoubleCheckTest_$5 *new_DaggerInternalDoubleCheckTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  J2OBJC_NEW_IMPL(DaggerInternalDoubleCheckTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1)
}

DaggerInternalDoubleCheckTest_$5 *create_DaggerInternalDoubleCheckTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  J2OBJC_CREATE_IMPL(DaggerInternalDoubleCheckTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1)
}
